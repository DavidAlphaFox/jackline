true : annot, bin_annot
<src> : include
<cli> : include

<src/config.ml>: package(sexplib), package(otr), package(sexplib.syntax), \
  syntax(camlp4o)
<src/escape.ml>: package(astring)
<src/persistency.ml>: package(sexplib), package(lwt), package(lwt.syntax), \
  package(nocrypto), syntax(camlp4o)
<src/user.ml>: package(sexplib), package(sexplib.syntax), package(otr), \
  package(erm_xmpp), package(otr), package(hex), syntax(camlp4o)
<src/xmpp_callbacks.ml>: package(camomile), package(erm_xmpp), \
  package(lwt), package(lwt.syntax), package(otr), package(sexplib), \
  package(tls), package(tls.lwt), package(zed), package(ptime), \
  package(rresult), syntax(camlp4o)
<src/xmpp_connection.ml>: package(erm_xmpp), package(lwt), \
  package(tls), package(tls.lwt)

<cli/cli_client.ml>: package(camomile), package(lambda-term), package(lwt), \
  package(lwt.syntax), package(otr), package(react), package(tls), \
  package(tls.lwt), package(zed), package(erm_xmpp), syntax(camlp4o)
<cli/cli_commands.ml>: package(astring), package(lwt), package(lwt.syntax), \
  package(otr), package(erm_xmpp), package(zed), syntax(camlp4o)
<cli/cli_config.ml>: package(lambda-term), package(lwt), package(nocrypto), \
  package(otr), package(react), package(zed), package(tls.lwt)
<cli/cli_state.ml>: package(hex), package(lwt), package(lwt.syntax), \
  package(nocrypto), package(erm_xmpp), package(tls.lwt), syntax(camlp4o)

<bin/jackline.{ml,byte,native}>: package(astring), package(camomile), \
  package(erm_xmpp), package(hex), package(lambda-term), package(lwt), \
  package(lwt.syntax), package(nocrypto), package(otr), package(react), \
  package(sexplib), package(sexplib.syntax), package(tls), package(tls.lwt), \
  package(zed), package(ptime), package(rresult), syntax(camlp4o)
